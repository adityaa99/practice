use mavenmovies;

-- Basic Aggregate Functions:
-- Question 1:
-- Retrieve the total number of rentals made in the Sakila database.
-- Hint: Use the COUNT() function.

SELECT count(RENTAL_ID) FROM RENTAL;

-- Question 2:
-- Find the average rental duration (in days) of movies rented from the Sakila database.
-- Hint: Utilize the AVG() function.

SELECT AVG(RENTAL_DURATION) FROM FILM;

-- String Functions:
-- Question 3:
-- Display the first name and last name of customers in uppercase.
-- Hint: Use the UPPER () function.

SELECT UPPER(FIRST_NAME), UPPER(LAST_NAME) FROM CUSTOMER;

-- Question 4:
-- Extract the month from the rental date and display it alongside the rental ID. 
-- Hint: Employ the MONTH() function.

SELECT monthname(RENTAL_DATE), RENTAL_ID FROM RENTAL;

-- GROUP BY:
-- Question 5:
-- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
-- Hint: Use COUNT () in conjunction with GROUP BY.

SELECT CUSTOMER_ID, COUNT(*) AS RENTAL_COUNT FROM RENTAL GROUP BY CUSTOMER_ID;

-- Question 6:
-- Find the total revenue generated by each store.
-- Hint: Combine SUM() and GROUP BY.

SELECT STORE_ID, SUM(AMOUNT) FROM STORE
	LEFT JOIN PAYMENT
	ON STORE.manager_staff_id =  PAYMENT.STAFF_ID
	GROUP BY STORE_ID; 

-- Joins:
-- Question 7:
-- Display the title of the movie, customer's first name, and last name who rented it.
-- Hint: Use JOIN between the film, inventory, rental, and customer tables.

SELECT TITLE, FIRST_NAME, LAST_NAME FROM FILM
	INNER JOIN INVENTORY 
		ON FILM.FILM_ID = INVENTORY.FILM_ID
    INNER JOIN RENTAL
		ON INVENTORY.INVENTORY_ID = RENTAL.INVENTORY_ID
    INNER JOIN CUSTOMER
		ON RENTAL.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID;
    
-- Question 8:
-- Retrieve the names of all actors who have appeared in the film 'Gone with the Wind."
-- Hint: Use JOIN between the film actor, film, and actor tables.

SELECT * FROM FILM WHERE TITLE = "GONE TROUBLE";

-- "Gone with the Wind" WAS NOT FOUND IN THE DB PROVIDED SO I AM DOING IT WITH "GONE TROUBLE"

SELECT FIRST_NAME, LAST_NAME, TITLE FROM actor
	INNER JOIN film_actor
		ON actor.actor_id = film_actor.actor_id
	INNER JOIN film
		ON film_actor.film_id = film.film_id
	WHERE TITLE = "GONE TROUBLE"; 

-- GROUP BY:
-- Question 1:
-- Determine the total number of rentals for each category of movies.
-- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.


SELECT category_ID, count(RENTAL_ID) AS COUNT_OF_RENT FROM FILM_CATEGORY
	INNER JOIN inventory
		ON film_category.film_id = INVENTORY.film_id
	INNER JOIN RENTAL
		ON INVENTORY.INVENTORY_id = RENTAL.INVENTORY_id 
	group by category_ID;

-- Question 2:
-- Find the average rental rate of movies in each language.
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY.

SELECT NAME, AVG(RENTAL_RATE) AS AVG_RENTAL_RATE 
	FROM language
	LEFT JOIN film
	ON language.language_id = film.language_id
	GROUP BY NAME;

-- Joins:
-- Question 3:
-- Retrieve the customer names along with the total amount they've spent on rentals.
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.

SELECT FIRST_NAME,LAST_NAME, customer.customer_id, sum(AMOUNT) AS T_AMOUNT
	FROM customer
    JOIN payment ON customer.customer_id = payment.customer_id
    group by customer.customer_id;


-- Question 4:
-- List the titles of movies rented by each customer in a particular city (e.g, 'London').
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.

SELECT TITLE, FIRST_NAME, CITY 
	FROM CITY
    INNER JOIN ADDRESS ON city.city_id = address.city_id
    INNER JOIN CUSTOMER ON address.address_id = customer.address_id
    INNER JOIN RENTAL ON customer.customer_id = rental.rental_id
    INNER JOIN INVENTORY ON rental.inventory_id = inventory.inventory_id
    INNER JOIN FILM ON inventory.film_id = film.film_id
    WHERE CITY = "LONDON";


-- Advanced Joins and GROUP BY:
-- Question 5:
-- Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.

SELECT
    f.film_id,
    f.title,
    COUNT(*) as rental_count
FROM
    rental r
JOIN
    inventory i ON r.inventory_id = i.inventory_id
JOIN
    film f ON i.film_id = f.film_id
GROUP BY
    f.film_id, f.title
ORDER BY
    rental_count DESC
LIMIT 5;


-- Question 6:
-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

    SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT i.store_id) AS rented_from_both_stores
FROM
    customer c
JOIN
    rental r ON c.customer_id = r.customer_id
JOIN
    inventory i ON r.inventory_id = i.inventory_id
GROUP BY
    c.customer_id, c.first_name, c.last_name
HAVING
    COUNT(DISTINCT i.store_id) > 1;